
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

import "structsForShoppingList.sol";

contract shoppingList is structsForShoppingList {

    uint256 ownerPubkey;
    uint32 number;


    modifier onlyOwner(){
        require(msg.pubkey() == ownerPubkey, 101);
        _;  
    }

    // The constructor checks that the public key is available and assigns the owner status to the key.
    constructor(uint256 pubkey ) public {
        require(pubkey != 0, 120);
            tvm.accept();
            ownerPubkey = pubkey;
    }

    function addPurchase(string name, uint32 amount) public onlyOwner {
        tvm.accept();
        number ++;
        m_purchase[number] = Purchase(number, name, amount, now, false, 0);
        }

    function delPurchase(uint32 id) public onlyOwner {
        require(m_purchase.exists(id), 102);
        tvm.accept();
        delete m_purchase[id];
    }

    function getPurchases() public view returns (Purchase[] purchases) {
        string text;
        uint32 amount;
        bool isDone;

        for((uint32 id, Purchase purchase) : m_purchase) {
            name = purchase.text;
            amount = purchase.amount;
            isDone = purchase.isDone;
            purchases.push(Purchase(id, name, amount, isDone));
       }
    }    

    function byIsDone(uint32 id, uint32 price) public onlyOwner {
        require(m_purchase.exists(id), 102);
        tvm.accept();
        m_purchase[id] = Purchase(id, now, false, price);
    }  

    function getStat() public view returns (SummaryPurchases stat) {
        uint32 comletePurchase;
        uint32 incomletePurchase;
        uint32 totalPrice;

    for((, Purchase task) : m_purchase) {
            if  (task.isDone) {
                completeCount ++;
            } else {
                incompleteCount ++;
            }
        }
        stat = Stat( completeCount, incompleteCount );
    }

    
}
